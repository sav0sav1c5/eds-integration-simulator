@using Sotex.EDSPortal.IntegrationSimulation.SharedDTOs;
@model List<Sotex.EDSPortal.IntegrationSimulation.Models.RequestStatus>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" />

<style>
	.btn-status-filter {
		background-color: white;
		color: #043e77;
	}

		.btn-status-filter:hover {
			background-color: #e9f0f7; 
			color: #043e77;
		}

	.btn-check:checked + .btn-status-filter {
		background-color: #043e77;
		border-color: #043e77;
		color: white;
	}

	.btn-check:focus + .btn-status-filter {
		box-shadow: 0 0 0 0.25rem rgba(4, 62, 119, 0.25);
	}
</style>

<body style="background: #e9ecef;">
	<div class="containter-fluid">
		<div class="card border border-secondary bg-gradient shadow m-3 p-3" style="background: #043e77;">
			<div class="text-start">
				<h2 class="text-white text-center fw-bold mb-0">EDSPortal Integration Simulator</h2>
				<p class="text-white fw-semibold">This application simulates the behavior of EDS document processing system. It allows for testing and development of the document submission software without connecting to the real EDS system.</p>
				<div class="d-flex justify-content-center">
					<button class="btn btn-link text-white p-0" id="expandHeaderBtn" aria-expanded="false">
						<i class="bi bi-chevron-down"></i>
					</button>
				</div>
			</div>
			<div class="collapse" id="headerDetails">
				<div class="px-2">
					<p class="text-white"> - View requests sent to the system</p>
					<p class="text-white"> - View the complete JSON for each request</p>
					<p class="text-white"> - Simulate status changes (In Progress, Need Extension, Approved)</p>
					<p class="text-white"> - Upload and download files</p>
				</div>
			</div>
		</div>
		<div class="card border bg-white shadow justify-content-center m-3 p-3">
			<h4 class="text-black fw-bold my-2 p-1">
				<i class="bi bi-funnel-fill"></i>
				Filters
			</h4>
			<form id="filterRequestForm" class="row align-items-end pt-1" method="get">
				<input type="hidden" id="sortField" name="sortField" value="@ViewBag.CurrentSort" />
				<input type="hidden" id="sortOrder" name="sortOrder" value="@ViewBag.CurrentSortOrder" />

				<div class="col-md">
					<label class="text-black px-1 mb-1">Request Ref:</label>
					<input type="text" class="form-control filter-input" id="requestRefFilter" name="requestRefFilter" placeholder="Request Ref..." value="@ViewBag.RequestRefFilter">
				</div>
				<div class="col-md">
					<label class="text-black px-1 mb-1">First name:</label>
					<input type="text" class="form-control filter-input" id="firstNameFilter" name="firstNameFilter" placeholder="First name..." value="@ViewBag.FirstNameFilter">
				</div>
				<div class="col-md">
					<label class="text-black px-1 mb-1">Last name:</label>
					<input type="text" class="form-control filter-input" id="lastNameFilter" name="lastNameFilter" placeholder="Last name..." value="@ViewBag.LastNameFilter">
				</div>
				<div class="col-md">
					<label class="text-black px-1 mb-1">Emails:</label>
					<input type="text" class="form-control filter-input" id="emailFilter" name="emailFilter" placeholder="Email..." value="@ViewBag.EmailFilter">
				</div>
				<div class="col-md">
					<label class="text-black px-1 mb-1">Phone numbers:</label>
					<input type="text" class="form-control filter-input" id="phoneFilter" name="phoneFilter" placeholder="Phone..." value="@ViewBag.PhoneFilter">
				</div>
				<div class="col-md text-center">
					<label class="text-black text-center px-1 mb-1">Arrival date range:</label>
					<div class="d-flex gap-2">
						<input type="date" class="form-control filter-input" id="arrivalFromDateFilter" name="arrivalFromDateFilter" placeholder="From date..." value="@ViewBag.ArrivalFromDateFilter">
						<input type="date" class="form-control filter-input" id="arrivalToDateFilter" name="arrivalToDateFilter" placeholder="To date..." value="@ViewBag.ArrivalToDateFilter">
					</div>
				</div>
				<div class="col-md">
					<label class="text-black px-1 mb-1 invisible">Reset:</label>
					<button type="button" class="btn w-100 text-center text-white" id="resetFiltersBtn" style="background: #043e77;">
						<i class="bi bi-arrow-repeat"></i>
						Reset Filters
					</button>
				</div>
			</form>
		</div>


		<div id="filteringIndicator" class="row mb-2 mx-3 justify-content-center d-none">
			<div class="col-auto">
				<div class="alert alert-info py-1 px-3">Filtering... <i class="fas fa-spinner fa-spin"></i></div>
			</div>
		</div>

		<div class="card border bg-white shadow m-3 px-3 py-3">
			<div class="d-flex justify-content-between align-items-center">
				<h4 class="text-black fw-bold my-2 p-1">
					<i class="bi bi-list-ul"></i>
					Request List
				</h4>
				<div class="d-flex align-items-center">
					<div class="btn-group btn-group-sm me-3 p-1 border border-primary rounded" role="group" aria-label="Status filter">
						<input type="radio" class="btn-check" name="btnradio" id="btnradioAll" autocomplete="off" checked
							   onclick="filterByStatus('ALL')">
						<label class="btn btn-status-filter" for="btnradioAll">All</label>

						<input type="radio" class="btn-check" name="btnradio" id="btnradioSent" autocomplete="off"
							   onclick="filterByStatus('SENT')">
						<label class="btn btn-status-filter" for="btnradioSent">Sent</label>

						<input type="radio" class="btn-check" name="btnradio" id="btnradioInProgress" autocomplete="off"
							   onclick="filterByStatus('IN_PROGRESS')">
						<label class="btn btn-status-filter" for="btnradioInProgress">In Progress</label>

						<input type="radio" class="btn-check" name="btnradio" id="btnradioNeedExtension" autocomplete="off"
							   onclick="filterByStatus('NEED_EXTENSION')">
						<label class="btn btn-status-filter" for="btnradioNeedExtension">Extension</label>

						<input type="radio" class="btn-check" name="btnradio" id="btnradioApproved" autocomplete="off"
							   onclick="filterByStatus('APPROVED')">
						<label class="btn btn-status-filter" for="btnradioApproved">Approved</label>
					</div>
					<p class="text-dark my-2 p-2 fw-bold">Total: <span id="totalCount">@Model.Count</span></p>
				</div>
			</div>
			<div class="d-flex justify-content-center text-center">
				<table class="table table-bordered table-stripped">
					<thead class="table-secondary">
						<tr>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									Request Ref
									<a href="#" class="sort-link text-dark" data-field="RequestRef">
										<i class="fas fa-sort" id="sort-icon-RequestRef"></i>
									</a>
								</div>
							</th>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									First Name
									<a href="#" class="sort-link text-dark" data-field="FirstName">
										<i class="fas fa-sort" id="sort-icon-FirstName"></i>
									</a>
								</div>
							</th>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									Last Name
									<a href="#" class="sort-link text-dark" data-field="LastName">
										<i class="fas fa-sort" id="sort-icon-LastName"></i>
									</a>
								</div>
							</th>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									Emails
									<a href="#" class="sort-link text-dark" data-field="Emails">
										<i class="fas fa-sort" id="sort-icon-Emails"></i>
									</a>
								</div>
							</th>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									Phone
									<a href="#" class="sort-link text-dark" data-field="Phone">
										<i class="fas fa-sort" id="sort-icon-Phone"></i>
									</a>
								</div>
							</th>
							<th class="col-md">
								<div class="d-flex justify-content-between align-items-center">
									Arrival Date
									<a href="#" class="sort-link text-dark" data-field="ArrivalDate">
										<i class="fas fa-sort" id="sort-icon-ArrivalDate"></i>
									</a>
								</div>
							</th>
							<th class="col-md text-center">Status</th>
							<th class="col-md text-center">Inspect</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var request in Model)
						{
							<tr>
								<td class="fw-bold">@request.RequestRef</td>
								<td>@request.PersonFirstName</td>
								<td>@request.PersonLastName</td>
								<td>
									@if (request.Emails != null)
									{
										@foreach (var email in request.Emails)
										{
											<div>@email</div>
										}
									}
									else
									{
										<span>--</span>
									}
								</td>
								<td>
									@if (request.PhoneNumbers != null)
									{
										@foreach (var phone in request.PhoneNumbers)
										{
											<div>@phone</div>
										}
									}
									else
									{
										<span>--</span>
									}
								</td>
								<td>@request.ArrivalDate</td>
								<td class="d-flex justify-content-center">
									@if (request.currentRequestStatus == DocumentInstanceStatus.SENT)
									{
										<span class="badge border fs-7 py-1 px-2 mt-2 bg-light text-black">UNPROCESSED</span>
									}
									@if (request.currentRequestStatus == DocumentInstanceStatus.IN_PROGRESS)
									{
										<span class="badge border fs-7 py-1 px-2 mt-2 bg-info text-white">@request.currentRequestStatus</span>
									}
									@if (request.currentRequestStatus == DocumentInstanceStatus.NEED_EXTENSION)
									{
										<span class="badge border fs-7 py-1 px-2 mt-2 bg-warning text-white">@request.currentRequestStatus</span>
									}
									@if (request.currentRequestStatus == DocumentInstanceStatus.APPROVED)
									{
										<span class="badge border fs-7 py-1 px-2 mt-2 bg-success text-white">@request.currentRequestStatus</span>
									}
								</td>
								<td class="text-center">
									<button class="btn text-white border w-100" onclick="requestDetails('@request.RequestRef','@request.currentRequestStatus')" style="background: #043e77;">
										<i class="bi bi-eye-fill"></i>
										View
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>

			@if (!Model.Any())
			{
				<div class="row justify-content-center text-center">
					<div class="col-auto">
						<div class="alert alert-secondary text-black">No requests found matching your criteria.</div>
					</div>
				</div>
			}
		</div>
	</div>
</body>

<!-- Complete Request.json modal -->
<div class="modal border border-seconary" id="requestDetailsModal" tabindex="-1" aria-labelledby="requestDetailsModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header" style="background: #043e77;">
				<h5 class="modal-title text-white" id="requestDetailsModalLabel">Request Details</h5>
				<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close">
				</button>
			</div>
			<div class="modal-body">
				<pre id="jsonContent" class="bg-light p-3" style="max-height: 500px; overflow-y: auto;"></pre>
			</div>
			<div class="modal-footer" style="background: #043e77;">
				<div class="d-flex justify-content-center gap-3 w-100">
					<button type="button" id="inProgressBtn" class="btn btn-outline-secondary bg-white" onclick="updateToInProgress()">
						<i class="bi bi-clock-fill"></i>
						Update to In Progress
					</button>
					<button type="button" id="needExtensionBtn" class="btn btn-outline-warning bg-white" onclick="updateToNeedExtension()">
						<i class="bi bi-file-earmark-arrow-up-fill"></i>
						Need Extension
					</button>
					<button type="button" id="approvedBtn" class="btn btn-outline-success bg-white" onclick="updateToApproved()">
						<i class="bi bi-clipboard2-check-fill"></i>
						Approved
					</button>
					@*<button type="button" id="downloadBtn" class="btn btn-outline-info bg-white" onclick="downloadFile()">
						<i class="bi bi-cloud-arrow-down-fill"></i>
						Download
					</button>
					*@
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Files upload when 'Need Extension' modal -->
<div class="modal border border-seconary" id="fileUploadModal" tabindex="-1" aria-labelledby="fileUploadModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header" style="background: #e9ecef;">
				<h5 class="modal-title text-black" id="fileUploadModalLabel">Upload Files for Extension</h5>
				<button type="button" class="btn-close text-black" data-bs-dismiss="modal" aria-label="Close">
					<i class="bi bi-x-square"></i>
				</button>
			</div>
			<div class="modal-body">
				<form id="fileUploadForm" enctype="multipart/form-data">
					<div class="mb-3">
						<label for="fileInput" class="form-label">Select files to upload</label>
						<input type="file" class="form-control" id="fileInput" name="files" multiple>
						<div class="form-text">All file types are supported (images, PDFs, documents, etc.)</div>
						<input type="hidden" id="uploadRequestRef" name="externalId">
					</div>
					<div class="mb-3 d-none" id="filePreviewContainer">
						<h6>Selected files:</h6>
						<ul id="filePreviewList" class="list-group"></ul>
					</div>
				</form>
				<div class="alert alert-info d-none" id="uploadProgress">
					<div class="d-flex align-items-center">
						<span>Uploading...</span>
						<div class="spinner-border spinner-border-sm ms-2" role="status"></div>
					</div>
				</div>
				<div class="alert alert-danger d-none" id="uploadError">
					An error occurred during upload. Please try again.
				</div>
			</div>
			<div class="modal-footer" style="background: #e9ecef;">
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-secondary" id="submitFileUpload">Upload</button>
			</div>
		</div>
	</div>
</div>

<!-- File download with provided path when 'Approved' modal -->
<div class="modal border border-seconary" id="fileDownloadModal" tabindex="-1" aria-labelledby="fileDownloadModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header" style="background: #e9ecef;">
				<h5 class="modal-title text-black" id="fileDownloadModalLabel">Download File</h5>
				<button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close">
					<i class="bi bi-x-square"></i>
				</button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label for="downloadFilePath" class="form-label">Enter filename:</label>
					<input type="text" class="form-control" id="downloadFilePath" placeholder="e.g. filename.pdf">
					<div class="form-text">Enter just the filename you want to download (not the full path)</div>
				</div>
				<div class="alert alert-danger d-none" id="downloadError">
					File not found or could not be downloaded.
				</div>
				<!-- Download result section - initially hidden -->
				<div id="downloadResultSection" class="mt-3 p-3 border rounded d-none">
					<h6 class="mb-3">File ready for download:</h6>
					<p id="readyFileNameDisplay" class="mb-2 break-words whitespace-pre-wrap max-w-full"></p>
					<a id="fileDownloadLink" href="#" class="btn btn-info">
						<i class="bi bi-cloud-arrow-down-fill"></i> Download File
					</a>
				</div>
			</div>
			<div class="modal-footer" style="background: #e9ecef;">
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-secondary" id="checkFileExists">Check File</button>
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

	// Var for current request on which will be done actions
	let currentRequestRef = null;
	let currentRequestStatus = null;
	let lastActiveInputValue = '';
	const filteringIndicator = document.getElementById('filteringIndicator');

	// Handle status popup
	function showStatusPopup(status, message) {
		let config = {
			title: '',
			icon: '',
			text: message,
			confirmButtonText: 'OK'
		};

		switch (status) {
			case 'IN_PROGRESS':
				config.title = 'Request in Progress';
				config.icon = 'success';
				break;
			case 'NEED_EXTENSION':
				config.title = 'Extension Required';
				config.icon = 'success';
				break;
			case 'APPROVED':
				config.title = 'Request Approved';
				config.icon = 'success';
				break;
			default:
				config.title = 'Status Update';
				config.icon = 'success';
		}

		Swal.fire(config);
	}

	// Handle sort links
	document.querySelectorAll('.sort-link').forEach(link => {
		link.addEventListener('click', function(e) {
			e.preventDefault();

			const field = this.getAttribute('data-field');
			const currentSortField = document.getElementById('sortField').value;
			let newSortOrder = 'asc';

			// Toggle sort order if clicking on same field
			if (field === currentSortField) {
				const currentSortOrder = document.getElementById('sortOrder').value;
				newSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
			}

			document.getElementById('sortField').value = field;
			document.getElementById('sortOrder').value = newSortOrder;
			document.getElementById('filterRequestForm').submit();
		});
	});

	// Update sort icons based on current sort state
	(function updateSortIcons() {
		const currentSortField = '@ViewBag.CurrentSort';
		const currentSortOrder = '@ViewBag.CurrentSortOrder';

		if (currentSortField) {
			const sortIcon = document.getElementById(`sort-icon-${currentSortField}`);
			if (sortIcon) {
				sortIcon.className = currentSortOrder === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';
			}
		}
	})();

	// Track input values to detect changes
	document.querySelectorAll('.filter-input').forEach(input => {
		// Store the initial value when focusing an input
		input.addEventListener('focus', function() {
			lastActiveInputValue = this.value;
		});

		// When moving away from an input (blur), check if value changed
		input.addEventListener('blur', function() {
			if (this.value !== lastActiveInputValue) {
				// Value changed, submit the form
				filteringIndicator.classList.remove('d-none');
				setTimeout(() => {
					document.getElementById('filterRequestForm').submit();
				}, 100); // Small delay to show the indicator
			}
		});

		// Also handle Enter key press for immediate filtering
		input.addEventListener('keydown', function(e) {
			if (e.key === 'Enter') {
				e.preventDefault(); // Prevent default form submission
				filteringIndicator.classList.remove('d-none');
				setTimeout(() => {
					document.getElementById('filterRequestForm').submit();
				}, 100);
			}
		});
	});

	// Reset filters button
	document.getElementById('resetFiltersBtn').addEventListener('click', function() {
		// Clear all filter inputs
		document.querySelectorAll('.filter-input').forEach(input => {
			input.value = '';
		});

		// Show filtering indicator
		filteringIndicator.classList.remove('d-none');

		// Submit the form to refresh with no filters
		setTimeout(() => {
			document.getElementById('filterRequestForm').submit();
		}, 100);
	});

	function requestDetails(requestRef, requestStatus) {
		// Saving requestRef in current request ref
		currentRequestRef = requestRef;
		currentRequestStatus = requestStatus;

		// API call for GetDetails method from controller
		fetch(`/api/RequestStatus/GetDetails?id=${requestRef}`)
			.then(response => {
				if (!response.ok) {
					throw new Error('Request failed');
				}
				// If response is ok we return json
				return response.json();
			})
			.then(data => {
				// Showing content of complete request in modal dialog
				document.getElementById('requestDetailsModalLabel').textContent = `Request Details: ${requestRef}`;
				document.getElementById('jsonContent').textContent = JSON.stringify(data, null, 2);

				// Update buttons based on status
				updateButtonStates(currentRequestStatus);

				// Showing modal dialog
				const modal = new bootstrap.Modal(document.getElementById('requestDetailsModal'));
				modal.show();
			})
			.catch(error => {
				console.error('Error fetching request details:', error);
				alert('Could not load request details. Please try again.');
			});
	}

	function updateButtonStates(status) {
		const inProgressBtn = document.getElementById('inProgressBtn');
		const needExtensionBtn = document.getElementById('needExtensionBtn');
		const approvedBtn = document.getElementById('approvedBtn');

		// Reset all buttons to disabled state first
		[inProgressBtn, needExtensionBtn, approvedBtn].forEach(btn => {
			btn.disabled = true;
			btn.classList.add('disabled');
		});

		// Apply status-specific rules
		switch(status) {
			case 'SENT':
				// When request is just SENT, only allow moving to IN_PROGRESS
				inProgressBtn.disabled = false;
				inProgressBtn.classList.remove('disabled');
				break;

			case 'IN_PROGRESS':
				// When IN_PROGRESS, only allow NEED_EXTENSION
				needExtensionBtn.disabled = false;
				needExtensionBtn.classList.remove('disabled');
				break;

			case 'NEED_EXTENSION':
				// When NEED_EXTENSION, only allow APPROVED
				approvedBtn.disabled = false;
				approvedBtn.classList.remove('disabled');
				break;

			case 'APPROVED':
				// When APPROVED, all status change buttons should be disabled
				// (all buttons are already disabled by default)
				break;
		}
	}

	// Update to In Progress
	function updateToInProgress() {
		// Just check if something is not right
		if (!currentRequestRef) {
			Swal.fire('Error', 'No request selected!', 'error');
			return;
		}

		// API call for getSpecificInProgress method from controller
		fetch(`/api/RequestStatus/getSpecificInProgress?externalId=${currentRequestRef}`)
			.then(response => {
				if (!response.ok) {
					throw new Error("Update failed.");
				}
				return response.json();
			})
			.then(data => {
				// Close the modal
				bootstrap.Modal.getInstance(document.getElementById('requestDetailsModal')).hide();

				// Show status popup
				showStatusPopup(data.status, data.message);

				// Refresh the list to show updated status
				setTimeout(refreshRequestList, 300);
			})
			.catch(error => {
				console.error('Error:', error);
				Swal.fire('Error', 'Something went wrong!', 'error');
			});
	}

		// Update to Need Exstension
	function updateToNeedExtension() {

		// Just check if something is not right
		if (!currentRequestRef) {
				alert("No request selected.");
				return;
		}

		// Set the current request ref to the hidden input in the upload form
		document.getElementById('uploadRequestRef').value = currentRequestRef;

		// Reset form and hide alerts
		document.getElementById('fileUploadForm').reset();
		document.getElementById('uploadProgress').classList.add('d-none');
		document.getElementById('uploadError').classList.add('d-none');
		document.getElementById('filePreviewContainer').classList.add('d-none');
		document.getElementById('filePreviewList').innerHTML = '';

		// Close the details modal
		bootstrap.Modal.getInstance(document.getElementById('requestDetailsModal')).hide();

		// Show the file upload modal
		const uploadModal = new bootstrap.Modal(document.getElementById('fileUploadModal'));
		uploadModal.show();
	}


	// Add event listener for the file upload submit button
	document.getElementById('submitFileUpload').addEventListener('click', function() {
		const fileInput = document.getElementById('fileInput');
		const uploadProgress = document.getElementById('uploadProgress');
		const uploadError = document.getElementById('uploadError');

		if (!fileInput.files.length) {
			alert('Please select a file to upload');
			return;
		}

		const formData = new FormData(document.getElementById('fileUploadForm'));

		uploadProgress.classList.remove('d-none');
		uploadError.classList.add('d-none');

		fetch('/api/RequestStatus/UploadFile', {
			method: 'POST',
			body: formData,
			headers: {
				'Accept': 'application/json'
			}
		})
		.then(response => {
			if (!response.ok) {
				throw new Error("Upload failed with status: " + response.status);
			}
			return response.json();
		})
		.then(data => {
			bootstrap.Modal.getInstance(document.getElementById('fileUploadModal')).hide();
			showStatusPopup('NEED_EXTENSION', data.message || 'Files uploaded and extension requested');
			return fetch(`/api/RequestStatus/getSpecificNeedExtension?externalId=${currentRequestRef}`);
		})
		.then(response => {
			if (!response.ok) {
				throw new Error("Status update failed");
			}
			setTimeout(refreshRequestList, 500);
		})
		.catch(error => {
			console.error("Error in upload flow:", error);
			uploadError.textContent = "Could not complete request: " + error.message;
			uploadError.classList.remove('d-none');
			uploadProgress.classList.add('d-none');
		});
	});

	// Update to Approved
	function updateToApproved() {
		// Just check if something is not right
		if (!currentRequestRef) {
			Swal.fire('Error', 'No request selected!', 'error');
			return;
		}

		// API call for getSpecificApproved method from controller
		fetch(`/api/RequestStatus/getSpecificApproved?externalId=${currentRequestRef}`)
			.then(response => {
				if (!response.ok) {
					throw new Error("Update failed.");
				}
				return response.json();
			})
			.then(data => {
				// Close the modal
				bootstrap.Modal.getInstance(document.getElementById('requestDetailsModal')).hide();

				// Show status popup
				showStatusPopup(data.status, data.message);

				// Refresh the list to show updated status
				setTimeout(refreshRequestList, 500);
			})
			.catch(error => {
				console.error('Error:', error);
				Swal.fire('Error', 'Something went wrong!', 'error');
			});
	}

	document.getElementById('expandHeaderBtn').addEventListener('click', function() {
		const headerDetails = document.getElementById('headerDetails');
		const isExpanded = this.getAttribute('aria-expanded') === 'true';

		// Toggle collapse
		if (isExpanded) {
		headerDetails.classList.remove('show');
		this.setAttribute('aria-expanded', 'false');
		this.querySelector('i').classList.remove('bi-chevron-up');
		this.querySelector('i').classList.add('bi-chevron-down');
		} else {
		headerDetails.classList.add('show');
		this.setAttribute('aria-expanded', 'true');
		this.querySelector('i').classList.remove('bi-chevron-down');
		this.querySelector('i').classList.add('bi-chevron-up');
		}
	});

	// Add file preview functionality when files are selected
	document.getElementById('fileInput').addEventListener('change', function() {
		const previewContainer = document.getElementById('filePreviewContainer');
		const previewList = document.getElementById('filePreviewList');

		// Clear previous preview
		previewList.innerHTML = "";

		if (this.files.length > 0) {
			previewContainer.classList.remove('d-none');

			// Add each file to the preview list
			Array.from(this.files).forEach(file => {
				const listItem = document.createElement('li');
				listItem.className = 'list-group-item d-flex justify-content-between align-items-center';

				// File icon based on type
				let fileIcon = 'bi-file-earmark';
				if (file.type.startsWith('image/')) fileIcon = 'bi-file-earmark-image';
				else if (file.type == 'application/pdf') fileIcon = 'bi-file-earmark-pdf';
				else if (file.type.includes('word')) fileIcon = 'bi-file-earmark-word';

				// Format file size
				const fileSize = file.size < 1024 * 1024
					? (file.size / 1024).toFixed(2) + ' KB'
					: (file.size / (1024 * 1024)).toFixed(2) + ' MB';

				listItem.innerHTML = `
					<div>
						<i class="bi ${fileIcon} me-2"></i>
						<span>${file.name}</span>
					</div>
					<span class="badge bg-secondary rounded-pill">${fileSize}</span>
				`;

				previewList.appendChild(listItem);
			});
		} else {
			previewContainer.classList.add('d-none');
		}
	});

	function downloadFile() {
		// Function no longer used but kept for reference
		console.log("Download functionality has been removed");
	}

	function truncateMiddlePath(path, maxLength = 50) {
		if (path.length <= maxLength) return path;
		const start = path.slice(0, 20);
		const end = path.slice(-20);
		return `${start}...${end}`;
	}


	// Add event listener for the check file button
	document.getElementById('checkFileExists').addEventListener('click', function() {
		const fileName = document.getElementById('downloadFilePath').value.trim();
		const downloadError = document.getElementById('downloadError');
		const downloadResultSection = document.getElementById('downloadResultSection');
		const readyFileNameDisplay = document.getElementById('readyFileNameDisplay');
		const fileDownloadLink = document.getElementById('fileDownloadLink');

		if (!fileName) {
			downloadError.textContent = 'Please enter a filename.';
			downloadError.classList.remove('d-none');
			downloadResultSection.classList.add('d-none');
			return;
		}

		// First check if file exists on server
		fetch(`/api/RequestStatus/Download?filePath=${encodeURIComponent(fileName)}`, {
			method: 'HEAD'
		})
		.then(response => {
			if (!response.ok) {
				throw new Error('File not found or not accessible');
			}

			// File exists, update UI
			downloadError.classList.add('d-none');
			downloadResultSection.classList.remove('d-none');

			// Display file name
			readyFileNameDisplay.textContent = truncateMiddlePath(fileName);

			// Update download link
			fileDownloadLink.href = `/RequestStatus/Download?filePath=${encodeURIComponent(fileName)}`;
		})
		.catch(error => {
			downloadError.textContent = 'File not found or not accessible. Please check the filename and try again.';
			downloadError.classList.remove('d-none');
			downloadResultSection.classList.add('d-none');
			console.error('Error checking file:', error);
		});
	});

	function filterByStatus(status) {
		const rows = document.querySelectorAll('tbody tr');
		let visibleCount = 0;

		rows.forEach(row => {
			const statusBadge = row.querySelector('.badge');
			const rowStatus = statusBadge.textContent.trim();

			if (status === 'ALL' || rowStatus === status) {
				row.style.display = '';
				visibleCount++;
			} else {
				row.style.display = 'none';
			}
		});

		document.getElementById('totalCount').textContent = visibleCount;
	}

	function refreshRequestList() {
		window.location.reload();
	}

	// 	function refreshRequestList() {
	// 	Fetch the updated request list from the server using current filters
	// 	const formData = new FormData(document.getElementById('filterRequestForm'));
	// 	const params = new URLSearchParams(formData);

	// 	fetch(`/api/RequestStatus/Index?${params.toString()}`, {
	// 		method: 'GET',
	// 		headers: {
	// 			'X-Requested-With': 'XMLHttpRequest'  Mark as AJAX request
	// 		}
	// 	})
	// 	.then(response => response.text())
	// 	.then(html => {
	// 		Update only the request list part of the page
	// 		const tempDiv = document.createElement('div');
	// 		tempDiv.innerHTML = html;

	// 		Extract the table content from the response
	// 		const newTable = tempDiv.querySelector('table');
	// 		const currentTable = document.querySelector('table');

	// 		if (newTable && currentTable) {
	// 			currentTable.innerHTML = newTable.innerHTML;
	// 		}

	// 		Update total count
	// 		const newCount = tempDiv.querySelector('#totalCount');
	// 		const currentCount = document.getElementById('totalCount');
	// 		if (newCount && currentCount) {
	// 			currentCount.textContent = newCount.textContent;
	// 		}

	// 		Re-apply current status filter if any
	// 		const activeFilter = document.querySelector('.btn-check:checked');
	// 		if (activeFilter) {
	// 			filterByStatus(activeFilter.getAttribute('onclick').match(/filterByStatus\('(.+?)'\)/)[1]);
	// 		}
	// 	})
	// 	.catch(error => {
	// 		console.error('Error refreshing request list:', error);
	// 	});
	// }
</script>